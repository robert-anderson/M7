cmake_minimum_required(VERSION 3.17)
project(M7 CXX C)
cmake_policy(SET CMP0074 NEW)
cmake_policy(SET CMP0076 NEW)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (APPLE)
    set(CMAKE_MACOSX_RPATH 1)
endif ()

include(ExternalProject)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

add_subdirectory(src)
add_subdirectory(test)
add_subdirectory(assets)
option(TCHINT_ROOT "")
if(TCHINT_ROOT)
    message(STATUS "Compiling with TCHInt support")
    target_compile_definitions(M7_lib PUBLIC ENABLE_TCHINT)
    target_include_directories(M7_lib PUBLIC ${TCHINT_ROOT}/src/include)
    target_link_directories(M7_lib PUBLIC ${TCHINT_ROOT}/src)
    target_link_libraries(M7_lib -ltchint)
endif()

try_compile(ENABLE_POPCNT ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake/have_popcnt.cpp)
if (ENABLE_POPCNT)
    message("POPCNT and POPCNTQ instructions detected")
    target_compile_definitions(M7_lib PUBLIC ENABLE_POPCNT)
endif()

try_compile(ENABLE_TZCNT ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake/have_tzcnt.cpp)
if (ENABLE_TZCNT)
    message("TZCNT and TZCNTQ instructions detected")
    target_compile_definitions(M7_lib PUBLIC ENABLE_TZCNT)
endif()

try_compile(ENABLE_ARM_NEON ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake/have_arm_neon.cpp)
if (ENABLE_ARM_NEON)
    message("ARM Neon header detected")
    target_compile_definitions(M7_lib PUBLIC ENABLE_ARM_NEON)
endif()

try_compile(ENABLE_CLZ ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake/have_clz.cpp)
if (ENABLE_CLZ)
    message("ARM instruction CLZ detected")
    target_compile_definitions(M7_lib PUBLIC ENABLE_CLZ)
endif()
